package main

import (
	"github.com/nu7hatch/gouuid"

	"encoding/csv"
	"encoding/json"
	"fmt"
	"log"
	"os"
	"regexp"
	"strings"
	"time"
)

var (
	namespace, _ = uuid.ParseHex("6328481a-12d1-45e4-a487-f0f35ba4c9d1")
	uuidRE       = regexp.MustCompile(`\{uuid\((.*)\)\}`)
)

type config struct {
	FullName            string
	LastName, FirstName string
	Phone               string
	Email               string
	UID                 string
}

func loadConfig() (*config, error) {
	if len(os.Args) > 2 {
		return nil, fmt.Errorf("too many arguments")
	} else if len(os.Args) == 1 {
		return nil, fmt.Errorf("must specify config file path")
	}
	file, err := os.Open(os.Args[1])
	if err != nil {
		return nil, err
	}
	fileInfo, err := file.Stat()
	if err != nil {
		return nil, err
	}
	bytes := make([]byte, fileInfo.Size())
	_, err = file.Read(bytes)
	if err != nil {
		return nil, err
	}
	config := new(config)
	if err := json.Unmarshal(bytes, config); err != nil {
		return nil, err
	}
	return config, nil
}

func generateTemplate(config *config) (t string) {
	t += "BEGIN:VCARD\n"
	t += "VERSION:3.0\n"
	t += "KIND:individual\n"
	if config.FirstName != "" || config.LastName != "" {
		t += "N:"
		if config.LastName != "" {
			t += "{" + config.LastName + "}"
		}
		t += ";"
		if config.FirstName != "" {
			t += "{" + config.FirstName + "}"
		}
		t += ";;;\n"
	}
	if config.FullName != "" {
		t += "FN:{" + config.FullName + "}\n"
	}
	if config.Phone != "" {
		t += "TEL;TYPE=cell:{" + config.Phone + "}\n"
	}
	if config.Email != "" {
		t += "EMAIL:{" + config.Email + "}\n"
	}
	if config.UID != "" {
		t += "UID:urn:uuid:{uuid({" + config.UID + "})}\n"
	}
	t += "NOTE:Generated by csvcard " + time.Now().Format(time.RFC822) + "\n"
	t += "END:VCARD\n"
	return
}

func main() {
	config, err := loadConfig()
	if err != nil {
		log.Fatalf("error loading config file: %v", err)
	}

	template := generateTemplate(config)

	csvReader := csv.NewReader(os.Stdin)
	records, err := csvReader.ReadAll()
	if err != nil {
		log.Fatalf("error reading input: %v", err)
	}
	header := records[0]
	records = records[1:]

	for _, record := range records {
		str := template
		for i, key := range header {
			str = strings.Replace(str, "{"+key+"}", record[i], -1)
		}
		for _, submatch := range uuidRE.FindAllStringSubmatch(str, -1) {
			id, _ := uuid.NewV3(namespace, []byte(submatch[1]))
			str = strings.Replace(str, submatch[0], id.String(), 1)
		}
		fmt.Print(str)
	}
}
